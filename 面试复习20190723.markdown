#Cookie / Session
```
cookie:存在浏览器的信息
sessiion:存在服务端的信息
1.若客户端禁用cookie时,无法使用cookie,而无论客户端如何设置,session都能正常工作
2.session能储存任意java对象,cookie只能存储String类型
```
#分布式实现sessino共享
```
cookie+session+redis+拦截器(interceptor)
1.用户登录后,用户信息存储在redis中,设置过期时间30min
2.redis的key作为token保存到cookie中,通过response对象传回到浏览器

3.当访问某个需要登陆验证的资源时,使用拦截器拦截访问请求,检查请求是否携带登陆信息的token,有则放行,无则拦截
```
#Ajax
```
1.异步发送请求,实现局部刷新
2.在客户端运行,减少服务器负载,减少不必要的数据返回
3.优化用户体验
```
#SpringMVC执行流程
```

```
#SpringMVC注解
```
@requestMapping url映射
@RequestBody    接收http请求的json数据,将json数据转换为java对象
@ResponseBody   返回对象转化为json响应客户端
```
#AOP面向切面编程
```
底层动态代理,在不改动原有代码的前提下动态添加功能
运用:日志,事务,统一异常处理,日期格式化
```
#IOC控制反转
```
将创建bean对象的操作交给容器,让容器统一管理bean对象的生命周期
使用时从容器中获取,或者容器注入
原理是反射
```
#DI依赖注入
```
Autowire:先按类型,找不到按名字
Resource:先按名字,找不到按类型
```

#Mybatis #和$
```
#:相当于将双引号
$:直接显示数据,有sql注入问题,但是排序和分组添加字符串时使用$
```
#Redis
```
主要用途:分布式缓存
优点:相对于其他的nosql,数据类型丰富,性能高
缺点:
1.难以进行多表查询
2.内存数据丢失问题,虽然有持久化方式,但是无法向关系型数据库那样保证数据的完整性
```
#数据类型:
```
String List set zset hash
```
#应用:
```
令牌机制登陆
热点数据缓存:商品分类,用户信息,帖子点赞,点赞数,浏览数
```
#redis放入内存
```
为了达到最快的读写速度,
将数据都读到内存中
通过异步的方式将数据写入磁盘
```
#redis持久化
```
RDB:指定时间间隔生成数据集的时间点快照
AOF:记录执行的所有写操作命令,服务器重启时,重新执行这些命令还原数据集
还可以对aof进行重写,只保存所需要的数据
```
#redis集群
```
主从模式(升级版:哨兵模式)/集群模式
至少需要3主3从,共6个节点
如果一个主节点挂掉了,将对应的从节点变成主节点继续工作
```
#Redis中的list
```
数据结构和java中的List结构不一样
ArrayList:基于数组
redis中list有链表和栈的特性,操作(增删数据)更高效
```

#项目演变过程
*演变过程讲述*
```
动静分离:分出一个静态服务器
负载均衡:nginx
分库分表:主从分离/读写分离
```
#分布式
```
作用:解决高并发问题
实现:
1.将不同的业务模块部署在不同的服务器上
2.或者将同一个业务模块拆分多个子业务,部署到不同的服务器上
```
#集群
```
作用:提高系统的处理能力
实现:多台服务器部署相同的服务,每台服务器就是集群的节点
```
#微服务
```
微服务:业务拆分上粒度更细,并且自己死一套完整的独立运行的程序
分布式:不一定是完全独立的,可能与其他系统存在依赖关系
```
#zookeeper
```
作用:分布式应用提供服务注册中心
实现:dubbo服务端往zookeeper注册服务,dubbo客户端从zookeeper调用服务
应用:分布式通知,协调,负载均衡,配置中心,分布式锁...
```
```
zookeeper挂掉:
客户端有缓存服务列表,服务能继续调用
但是新的服务无法往zookeeper注册
```
#Dubbo消费端如何段勇生产端
*?*
```
业务层代码调用远程接口的方法时,实际是调用本地创建的代理对象
```
#Dubbo基本原理
```
RPC协议:数据的序列化和反序列化,并将序列化后的数据通过TCP进行传输
```
#RPC协议和http协议
*?*
```
RPC:远程过程调用,主要工作在TCP协议上,效率高
HTTP:超文本传输协议,传输层TCP之上,开发简单
```
#Dubbo的理解
*?*
```
(1) 默认推荐使用 netty 框架
(2) 默认是阻塞的，可以异步调用，没有返回值的时候可以这么做
(3) 推荐使用 zookeeper 注册中心
(4) 默认使用 Hessian 序列化，还有 Dubbo，FastJSON。Java 自带序列化
Dubbo 是高集群高可用，挂的几率很小，就算是挂了重新启动就好了
```
#对象序列化
```
序列化:java对象->字节序列,写入字节流,用于保存磁盘/网络传输,
可以保留一个对象的数据,还可以递归保存对象引用的每个对象的数据("深复制")
```
#es
```
定义:基于Lucene的搜索服务器
作用:提供分布式多用户能力的全文搜索引擎
特点:速度快.零配置.免费
满足需求:实时搜索.简单的多用户.可靠分布式
```
#倒排索引
*?*
```
作用:搜索引擎的快速搜索
实现:数据结构的散列图,从单词导向文档或网页
```
#分片
```
索引:es中文档的集合
分片:分布式搜索引擎中,索引分割成分布在多个节点上
```
#项目中如何使用es
```
聚合搜索:攻略多条件查询
全文搜索:攻略/游记/用户/目的地搜索
```
#项目中如何使用redis
```
海外/国内/热门推荐排行
```


#dubbo作用
#zookeeper作用
#redis   
https://www.runoob.com/redis/redis-lists.html
